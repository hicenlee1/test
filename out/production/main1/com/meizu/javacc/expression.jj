/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(ExpressionParser)
package com.meizu.bigdata.openapi.route.rule.expression.parser;
import java.io.ByteArrayInputStream;
import com.meizu.bigdata.openapi.route.rule.expression.ArrayExpression;
import com.meizu.bigdata.openapi.route.rule.expression.Condition;
import com.meizu.bigdata.openapi.route.rule.expression.EqualsExpression;
import com.meizu.bigdata.openapi.route.rule.expression.Expression;
import com.meizu.bigdata.openapi.route.rule.expression.RangeExpression;

public class ExpressionParser
{

  public ExpressionParser(String queryStr)
  {
      this(new ByteArrayInputStream(queryStr.getBytes()));
  }
}

PARSER_END(ExpressionParser)


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < LEFTLTE : "[" >
| < LEFTLT : "(" >
| < RIGHTLTE: "]" >
| < RIGHTLT : ")" >
}

TOKEN :
{
  < S_DOUBLE: ((<CONSTANT>)? "." <CONSTANT> ( ["e","E"] ([ "-","+"])? <CONSTANT> )?
				|
				(<CONSTANT>)+ (".")? ["e","E"] ([ "-","+"])? (<CONSTANT>)+
				)>
| < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < ALL :"-" >
}

Expression parser():
{
  ArrayExpression arrayExp=new ArrayExpression();
}
{
	(
	   LOOKAHEAD(rangeExpression(arrayExp))
	 {
	    rangeExpression(arrayExp);
	 }
	|
	{
	  equalsExpression(arrayExp);
	}
 )
 (
	","
	(
	   LOOKAHEAD(rangeExpression(arrayExp))
	 {
	    rangeExpression(arrayExp);
	 }
	|
	 {
	  equalsExpression(arrayExp);
	 }
	)
)*
{
  return arrayExp;
}
}



void rangeExpression(ArrayExpression arrayEpx):
{
  Condition leftCon;
  Condition rightCon;
  double leftValue=0;
  double rightValue=0;
}
{
	(
	<LEFTLTE>{leftCon=Condition.gte;}
	|
	<LEFTLT>{ leftCon=Condition.gt;}
	)
    leftValue=expressObj()
    ","
  	 rightValue=expressObj()
  	(
	<RIGHTLTE>{rightCon=Condition.lte;}
	|<RIGHTLT>{rightCon=Condition.lt;}
	)
	{
	  if (rightValue==Double.MIN_VALUE)
	  {
	    rightValue=Double.MAX_VALUE;
	  }
	  arrayEpx.addExpression(new RangeExpression(rightCon,rightValue,leftCon,leftValue));
	}
}

void equalsExpression(ArrayExpression arrayEpx):
{
    double value=0;
}
{

  value=expressObj()
  {
      arrayEpx.addExpression(new EqualsExpression(value));
  }

}

double expressObj():
{
	double retval = 0;
	Token token = null;
}
{

(
	 LOOKAHEAD(<S_DOUBLE>)  token=<S_DOUBLE> { retval =Double.valueOf(token.image); }
	| LOOKAHEAD(<ALL>)  token=<ALL> { retval =Double.MIN_VALUE; }
	|  token=<CONSTANT> { retval = Double.valueOf(token.image); }

)
   {

    	return retval;
    }
}