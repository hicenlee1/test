package jksj.concurrent.shua2;

/**
 * 局部变量会存在并发问题吗？
 *
 * 编译原理：
 *
 * 当调用一个方法时，CPU 会找到这个方法的地址，然后跳转过去，执行完成后返回。
 * 调用参数和函数返回地址，保存在CPU 堆栈寄存器。
 * 栈时和方法调用相关的，所以称作  调用栈
 *
 * 每个方法都有独立的调用栈空间，称作 栈帧。每个栈帧中保存着各自的参数和返回地址。
 * 当调用法时候，创建新的栈帧，并压入 调用栈。
 * 所以，栈帧和方法是同生共死的。
 *
 * 局部变量也是放在调用栈中。
 *
 *
 * 所以，如果一个变量想跨方法，必须创建在堆中。
 *
 * 每个线程都有自己独立的调用栈，所以局部变量是线程安全的
 *
 * 所以有线程封闭技术
 */
public class Chapter11 {
}
