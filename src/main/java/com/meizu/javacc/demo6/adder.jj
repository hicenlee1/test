/* 支持括号，一元运算符 */
options {
STATIC = false;
}

PARSER_BEGIN(Adder)
    package com.meizu.javacc.demo6;
    import java.io.ByteArrayInputStream;
    import java.io.PrintStream;

    class Adder {
        public Adder(String expression) {
            this(new ByteArrayInputStream(expression.getBytes()));
        }

        double priviousValue = 0.0;
    }
PARSER_END(Adder)

SKIP: {" "}
SKIP: {"\n" | "\r" | "\r\n" }
TOKEN: {<PLUS: "+">}
TOKEN: {<MINUS: "-">}
TOKEN: {<TIMES: "*">}
TOKEN: {<DIVIDE:"/">}
TOKEN : { < NUMBER : <DIGITS>
                   | <DIGITS> "." <DIGITS>
                   | <DIGITS> "."
                   | "."<DIGITS> >
        }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }
TOKEN : {<OPEN_PAR: "(">}
TOKEN : {<CLOSE_PAR: ")">}
TOKEN : {<PREVIOUS: "$">}
TOKEN : {<EOL: "#">}

void start(PrintStream ps) throws NumberFormatException:
{

}
{
    (
        priviousValue = Expression()
        <EOL>{ps.println(priviousValue);}
    )*
    <EOF>
}

double Expression() throws NumberFormatException:
{
    double i;
    double value;
}
{
    value = Term()
    (
        <PLUS>
            i = Term()
            {value += i;}
        | <MINUS>
            i = Term()
            {value -= i;}
    )*
    {return value;}

}


double Term() throws NumberFormatException:
{
    double i;
    double value;
}
{
    value = primary()
    (
        <TIMES>
            i = primary()
            {value *= i;}
        |<DIVIDE>
            i = primary()
            {value /= i;}
    )*
    {return value;}
}


double primary() throws NumberFormatException:
{
    Token t;
    double d;
}
{
    t = <NUMBER>
        {return Double.parseDouble(t.image);}
    | <PREVIOUS>
        {return priviousValue; }
    | <OPEN_PAR> d=Expression() <CLOSE_PAR>
        {return d;}
    | <MINUS> d=primary()
        {return -d;}
}