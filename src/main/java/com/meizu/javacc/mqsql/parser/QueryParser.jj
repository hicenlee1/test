 options{  static = false;}PARSER_BEGIN(QueryParser)package com.meizu.javacc.mqsql.parser;import java.util.List;import java.util.ArrayList;import java.io.ByteArrayInputStream;import com.meizu.javacc.mqsql.Query;import com.meizu.javacc.mqsql.Query.WhereJoin;import com.meizu.javacc.mqsql.QueryWhere;import com.meizu.javacc.mqsql.QueryWhere.Etype;import com.meizu.javacc.mqsql.Column;public class QueryParser{  public QueryParser(String queryStr)  {    	this(new ByteArrayInputStream(queryStr.getBytes()));  } }PARSER_END(QueryParser)SKIP:{    " "|   "\t"|   "\r"|   "\n"}TOKEN :{  < K_BY : ("b"|"B")("y"|"Y")>| < K_IS : ("i"|"I")("s"|"S")>| < K_IN : ("i"|"I")("n"|"N") >| < K_OR : ("o"|"O")("r"|"R") >| < K_ON : ("o"|"O")("n"|"N") >| < K_AND : ("a"|"A")("n"|"N")("d"|"D") >| < K_NOT : ("n"|"N")("o"|"O")("t"|"T") >| < K_SET : ("s"|"S")("e"|"E")("t"|"T") >| < K_ASC : ("a"|"A")("s"|"S")("c"|"C") >| < K_DESC : ("d"|"D")("e"|"E")("s"|"S")("c"|"C") >| < K_NULL : "NULL" >| < K_LIKE : ("p"|"P")("l"|"L")("i"|"I")("k"|"K")("e"|"E")  >| < K_FROM : ("f"|"F")("r"|"R")("o"|"O")("m"|"M") >| < K_WHERE : ("w"|"W")("h"|"H")("e"|"E")("r"|"R")("e"|"E") >| < K_LIMIT : ("l"|"L")("i"|"I")("m"|"M")("i"|"I")("t"|"T") >| < K_ORDER : ("o"|"O")("r"|"R")("d"|"D")("e"|"E")("r"|"R") >| < K_SELECT : ("s"|"s")("e"|"E")("l"|"L")("e"|"E")("c"|"C")("t"|"T") >| < MQ : ("M"|"m")("Q"|"q")>| <K_AS: ("a"|"A")("s"|"S")>}TOKEN : /* Numeric Constants */{	< S_DOUBLE: ((<S_INTEGER>)? "." <S_INTEGER> ( ["e","E"] ([ "-","+"])? <S_INTEGER> )? 				|				(<S_INTEGER>)+ (".")? ["e","E"] ([ "-","+"])? (<S_INTEGER>)+				)>  | 	< S_INTEGER: ( <DIGIT> )+ >  | 	< #DIGIT: ["0" - "9"] >}SPECIAL_TOKEN:{   <LINE_COMMENT: "--"(~["\r","\n"])*>|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">}TOKEN:{	< S_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >| 	< #LETTER:        ["a"-"z",        "A"-"Z",       "_",       "\u0024",       "\u0041"-"\u005a",       "\u005f",       "\u0061"-"\u007a",       "\u00c0"-"\u00d6",       "\u00d8"-"\u00f6",       "\u00f8"-"\u00ff",       "\u0100"-"\u1fff",       "\u3040"-"\u318f",       "\u3300"-"\u337f",       "\u3400"-"\u3d2d",       "\u4e00"-"\u9fff",       "\uf900"-"\ufaff"       ] >|   < #SPECIAL_CHARS: "$" | "_">|   < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" | ("`" (~["\n","\r","`"])* "`") >}Query parser() :{  Query query = new Query();  List < Column > fromColumn = null;}{  (    < K_SELECT > fromColumn = getColumnList()    < K_FROM ><MQ>    [     	 whereClause(query) 	]  )  <EOF>  {    query.setQueryColumn(fromColumn);     return query;  }} void whereClause(Query query): {    QueryWhere where;    List<QueryWhere> queryWheres=new ArrayList<QueryWhere>(); }{    <K_WHERE> expressionFirst(queryWheres)	Expression(query,queryWheres)    {      query.setQueryWheres(queryWheres);    }}void expressionFirst(List<QueryWhere> queryWheres):{  QueryWhere where;}{     where=Condition()	 {		 queryWheres.add(where);	 }}void Expression(Query query,  List<QueryWhere> queryWheres):{}{	    LOOKAHEAD(<K_AND>)		 andExpression(queryWheres)		{		  query.setWhereJoin(WhereJoin.and);		}	   | LOOKAHEAD(<K_OR>)	   orExpression(queryWheres)	   {	       query.setWhereJoin(WhereJoin.or);	   }	   |	   {	      query.setWhereJoin(WhereJoin.and);	   }}void orExpression(List queryWheres)  :{    QueryWhere where;}{	(	    <K_OR>		 where= Condition()		 {		     queryWheres.add(where);		 }	 )*	 }void andExpression(List queryWheres)  :{    QueryWhere where;}{	(	  <K_AND>		 where= Condition()		 {		     queryWheres.add(where);		 } 	 )*	 } QueryWhere Condition():{	QueryWhere result;}{	(LOOKAHEAD(SQLCondition()) result=SQLCondition()	| result=RegularCondition())		{ return result; }}QueryWhere RegularCondition():{	QueryWhere result =new QueryWhere();	Object rigth;	String exp;}{	whereName(result)	(	">" { exp=">"; }	| "<" { exp="<"; }	| "=" { exp="=";}	| ">=" { exp=">="; }	| "<=" { exp="<="; }	| ("<>" | "!=") {exp="!=";}	)	rigth=expressObj()	{	     result.setValue(rigth);		 if (">".equals(exp))		 {		 	result.setEtype(Etype.gt);		 }else if ("<".equals(exp))		 {		   result.setEtype(Etype.lt);		 }else if ("=".equals(exp))		 {		    result.setEtype(Etype.equals);		 }else if (">=".equals(exp))		 {		    result.setEtype(Etype.egt);		 }else if ("<=".equals(exp))		 {		      result.setEtype(Etype.elt);		 }else if ("!=".equals(exp))		 {		      result.setEtype(Etype.notequals);		 }	}				{	  result.setValue(rigth);	  return result;	}}QueryWhere SQLCondition():{	QueryWhere result;}{	(	LOOKAHEAD(InExpression()) result=InExpression()	|  result=LikeExpression())	{ return result; }}QueryWhere InExpression() :{	QueryWhere result =new QueryWhere();	List<Object> inValue=null;    result.setEtype(Etype.in);}{  	whereName(result)    [<K_NOT> { result.setEtype(Etype.notin); } ] <K_IN> "("inValue=objList()")"	{	 result.setValue(inValue);	  return result;	}}List<Object> objList():{	List<Object> retValue = new ArrayList<Object>();	Object value;}{    value=expressObj() { retValue.add(value); } ("," value=expressObj() { retValue.add(value); })*	{		return retValue;	}} QueryWhere LikeExpression() :{    QueryWhere result =new QueryWhere();    String name;    Object obj;    String rigth;    	Object sleft=null;    boolean isNot=false;}{	 whereName(result)    <K_LIKE> obj=expressObj()	{     result.setValue(obj);	 result.setEtype(Etype.plike);	 return result; 	}}Object expressObj():{ 	Object retval = null;	Token token = null;	String str;}{(	<K_NULL> { retval =null; }		| LOOKAHEAD(<S_DOUBLE>)  token=<S_DOUBLE> { retval =Double.valueOf(token.image); }		| LOOKAHEAD(<S_INTEGER>)  token=<S_INTEGER> { retval = Long.valueOf(token.image); }	| token=<S_CHAR_LITERAL> { 	 	str=token.image;        retval = str.substring(1,str.length()-1);	   }	)    { 		    	return retval;     }}String Alias():{ String retval = null; }{	[<K_AS>] retval=RelObjectName()   { return retval; }}List getColumnList() :{  List<Column> columns = new ArrayList<Column>();  Column col;}{  col = columnItem()  {    columns.add(col);  }  (    "," col = columnItem()    {       columns.add(col);    }  )*  {    return columns;  }   }Column columnItem():{  Column col;}{     (  LOOKAHEAD(functionCol())    col=functionCol()	|	 col=simpCol()    )	{	  return col;	}}void whereName(QueryWhere where):{}{     (  LOOKAHEAD(funWhereName(where))   	funWhereName(where)	|	 simpWhereName(where)    )  }void funWhereName(QueryWhere where):{  String name;  String mcol=null;  String fun=null;}{  fun=RelObjectName()"(" name=RelObjectName()["."mcol=RelObjectName()]")"  { 	where.setFucName(fun); 	where.setSubName(mcol); 	where.setName(name);  }}void simpWhereName(QueryWhere where) :{  String name;  String mcol=null;}{  name = RelObjectName()["."mcol=RelObjectName()]  { 	where.setSubName(mcol); 	where.setName(name);  }}Column functionCol():{  String column;  String mcol=null;  String ali=null;  String fun=null;}{  fun=RelObjectName()"(" column=RelObjectName()["."mcol=RelObjectName()]")" [ali=Alias()]  {    Column col=new Column();    col.setAliName(ali);    col.setMcolName(mcol);    col.setFunc(fun);    col.setColumnName(column);    return col;  }}Column simpCol() :{  String column;  String mcol=null;  String ali=null;}{  (  	"*"  	 {   	  column = "*";  	 }	| column = RelObjectName()["."mcol=RelObjectName()] [ali=Alias()]	)  {    Column col=new Column();    col.setAliName(ali);    col.setMcolName(mcol);    col.setColumnName(column);    return col;  }}   String RelObjectName() :{  Token tk = null;}{  (    tk = < S_IDENTIFIER >  | tk = < S_QUOTED_IDENTIFIER >  | tk=< S_INTEGER>  )  {    return tk.image;  }}