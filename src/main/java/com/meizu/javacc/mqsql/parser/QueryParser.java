/* QueryParser.java */
/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package com.meizu.javacc.mqsql.parser;

import java.util.List;
import java.util.ArrayList;
import java.io.ByteArrayInputStream;
import com.meizu.javacc.mqsql.Query;
import com.meizu.javacc.mqsql.Query.WhereJoin;
import com.meizu.javacc.mqsql.QueryWhere;
import com.meizu.javacc.mqsql.QueryWhere.Etype;
import com.meizu.javacc.mqsql.Column;
public class QueryParser implements QueryParserConstants {
  public QueryParser(String queryStr)
  {

        this(new ByteArrayInputStream(queryStr.getBytes()));
  }

  final public Query parser() throws ParseException {Query query = new Query();
  List < Column > fromColumn = null;
    jj_consume_token(K_SELECT);
    fromColumn = getColumnList();
    jj_consume_token(K_FROM);
    jj_consume_token(MQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_WHERE:{
      whereClause(query);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
query.setQueryColumn(fromColumn);
     {if ("" != null) return query;}
    throw new Error("Missing return statement in function");
}

  final public void whereClause(Query query) throws ParseException {QueryWhere where;
    List<QueryWhere> queryWheres=new ArrayList<QueryWhere>();
    jj_consume_token(K_WHERE);
    expressionFirst(queryWheres);
    Expression(query,queryWheres);
query.setQueryWheres(queryWheres);
}

  final public void expressionFirst(List<QueryWhere> queryWheres) throws ParseException {QueryWhere where;
    where = Condition();
queryWheres.add(where);
}

  final public void Expression(Query query,  List<QueryWhere> queryWheres) throws ParseException {
    if (jj_2_1(2147483647)) {
      andExpression(queryWheres);
query.setWhereJoin(WhereJoin.and);
    } else if (jj_2_2(2147483647)) {
      orExpression(queryWheres);
query.setWhereJoin(WhereJoin.or);
    } else {
query.setWhereJoin(WhereJoin.and);
    }
}

  final public void orExpression(List queryWheres) throws ParseException {QueryWhere where;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_OR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(K_OR);
      where = Condition();
queryWheres.add(where);
    }
}

  final public void andExpression(List queryWheres) throws ParseException {QueryWhere where;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AND:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(K_AND);
      where = Condition();
queryWheres.add(where);
    }
}

  final public QueryWhere Condition() throws ParseException {QueryWhere result;
    if (jj_2_3(2147483647)) {
      result = SQLCondition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        result = RegularCondition();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public QueryWhere RegularCondition() throws ParseException {QueryWhere result =new QueryWhere();
        Object rigth;
        String exp;
    whereName(result);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 34:{
      jj_consume_token(34);
exp=">";
      break;
      }
    case 35:{
      jj_consume_token(35);
exp="<";
      break;
      }
    case 36:{
      jj_consume_token(36);
exp="=";
      break;
      }
    case 37:{
      jj_consume_token(37);
exp=">=";
      break;
      }
    case 38:{
      jj_consume_token(38);
exp="<=";
      break;
      }
    case 39:
    case 40:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 39:{
        jj_consume_token(39);
        break;
        }
      case 40:{
        jj_consume_token(40);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
exp="!=";
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rigth = expressObj();
result.setValue(rigth);
                 if (">".equals(exp))
                 {
                        result.setEtype(Etype.gt);
                 }else if ("<".equals(exp))
                 {
                   result.setEtype(Etype.lt);
                 }else if ("=".equals(exp))
                 {
                    result.setEtype(Etype.equals);
                 }else if (">=".equals(exp))
                 {
                    result.setEtype(Etype.egt);
                 }else if ("<=".equals(exp))
                 {
                      result.setEtype(Etype.elt);
                 }else if ("!=".equals(exp))
                 {
                      result.setEtype(Etype.notequals);
                 }
result.setValue(rigth);
          {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public QueryWhere SQLCondition() throws ParseException {QueryWhere result;
    if (jj_2_4(2147483647)) {
      result = InExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        result = LikeExpression();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public QueryWhere InExpression() throws ParseException {QueryWhere result =new QueryWhere();
        List<Object> inValue=null;
    result.setEtype(Etype.in);
    whereName(result);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
result.setEtype(Etype.notin);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(41);
    inValue = objList();
    jj_consume_token(42);
result.setValue(inValue);
          {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public List<Object> objList() throws ParseException {List<Object> retValue = new ArrayList<Object>();
        Object value;
    value = expressObj();
retValue.add(value);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(43);
      value = expressObj();
retValue.add(value);
    }
{if ("" != null) return retValue;}
    throw new Error("Missing return statement in function");
}

  final public QueryWhere LikeExpression() throws ParseException {QueryWhere result =new QueryWhere();
    String name;
    Object obj;
    String rigth;
        Object sleft=null;
    boolean isNot=false;
    whereName(result);
    jj_consume_token(K_LIKE);
    obj = expressObj();
result.setValue(obj);
         result.setEtype(Etype.plike);
         {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public Object expressObj() throws ParseException {Object retval = null;
        Token token = null;
        String str;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NULL:{
      jj_consume_token(K_NULL);
retval =null;
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_5(2147483647)) {
        token = jj_consume_token(S_DOUBLE);
retval =Double.valueOf(token.image);
      } else if (jj_2_6(2147483647)) {
        token = jj_consume_token(S_INTEGER);
retval = Long.valueOf(token.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_CHAR_LITERAL:{
          token = jj_consume_token(S_CHAR_LITERAL);
str=token.image;
        retval = str.substring(1,str.length()-1);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return retval;}
    throw new Error("Missing return statement in function");
}

  final public String Alias() throws ParseException {String retval = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_AS:{
      jj_consume_token(K_AS);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    retval = RelObjectName();
{if ("" != null) return retval;}
    throw new Error("Missing return statement in function");
}

  final public List getColumnList() throws ParseException {List<Column> columns = new ArrayList<Column>();
  Column col;
    col = columnItem();
columns.add(col);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(43);
      col = columnItem();
columns.add(col);
    }
{if ("" != null) return columns;}
    throw new Error("Missing return statement in function");
}

  final public Column columnItem() throws ParseException {Column col;
    if (jj_2_7(2147483647)) {
      col = functionCol();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
      case 45:{
        col = simpCol();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return col;}
    throw new Error("Missing return statement in function");
}

  final public void whereName(QueryWhere where) throws ParseException {
    if (jj_2_8(2147483647)) {
      funWhereName(where);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        simpWhereName(where);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void funWhereName(QueryWhere where) throws ParseException {String name;
  String mcol=null;
  String fun=null;
    fun = RelObjectName();
    jj_consume_token(41);
    name = RelObjectName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
      mcol = RelObjectName();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(42);
where.setFucName(fun);
        where.setSubName(mcol);
        where.setName(name);
}

  final public void simpWhereName(QueryWhere where) throws ParseException {String name;
  String mcol=null;
    name = RelObjectName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
      mcol = RelObjectName();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
where.setSubName(mcol);
        where.setName(name);
}

  final public Column functionCol() throws ParseException {String column;
  String mcol=null;
  String ali=null;
  String fun=null;
    fun = RelObjectName();
    jj_consume_token(41);
    column = RelObjectName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
      mcol = RelObjectName();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(42);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_AS:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      ali = Alias();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
Column col=new Column();
    col.setAliName(ali);
    col.setMcolName(mcol);
    col.setFunc(fun);
    col.setColumnName(column);
    {if ("" != null) return col;}
    throw new Error("Missing return statement in function");
}

  final public Column simpCol() throws ParseException {String column;
  String mcol=null;
  String ali=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
column = "*";
      break;
      }
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      column = RelObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 44:{
        jj_consume_token(44);
        mcol = RelObjectName();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AS:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        ali = Alias();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
Column col=new Column();
    col.setAliName(ali);
    col.setMcolName(mcol);
    col.setColumnName(column);
    {if ("" != null) return col;}
    throw new Error("Missing return statement in function");
}

  final public String RelObjectName() throws ParseException {Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:{
      tk = jj_consume_token(S_IDENTIFIER);
      break;
      }
    case S_QUOTED_IDENTIFIER:{
      tk = jj_consume_token(S_QUOTED_IDENTIFIER);
      break;
      }
    case S_INTEGER:{
      tk = jj_consume_token(S_INTEGER);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tk.image;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_8()
 {
    if (jj_3R_14()) return true;
    if (jj_scan_token(41)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_11()) return true;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_9()) return false;
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(44)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(K_AND)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(44)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_19()) return false;
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_3R_14()) return true;
    if (jj_scan_token(41)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(44)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(29)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(33)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(43)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(41)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_25()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_26()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_27()) return false;
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public QueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40000,0x100,0x400,0x22000000,0x0,0x0,0x22000000,0x800,0x0,0x8000,0x0,0x800000,0x0,0x22000000,0x22000000,0x0,0x0,0x0,0x22800000,0x0,0x22800000,0x22000000,0x22000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x2,0x180,0x1fc,0x2,0x0,0x800,0x0,0x1,0x0,0x800,0x2002,0x2,0x1000,0x1000,0x1000,0x2,0x1000,0x2,0x2002,0x2,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public QueryParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new QueryParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public QueryParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new QueryParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new QueryParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QueryParser(QueryParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QueryParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 23; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 8; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
